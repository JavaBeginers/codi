package edu.uoc.tdp.pac4.client.mantenimiento;

import edu.uoc.tdp.pac4.beans.AuxiliarCombo;
import edu.uoc.tdp.pac4.beans.Usuario;
import edu.uoc.tdp.pac4.remote.Mantenimiento;
import edu.uoc.tdp.pac4.util.LanguageUtils;
import edu.uoc.tdp.pac4.exceptions.NoRolesException;
import edu.uoc.tdp.pac4.util.ComboItem;

import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**********************************************************************
 ******************** @author JavaBeginers - Cristian******************
 *********************************************************************/

public class PnlMantenimientoUsuarios extends javax.swing.JDialog 
{
    private Mantenimiento      manager;
    private LanguageUtils      language;
    private ArrayList<Usuario> usuarios;
    private boolean dofilter   = false;
    
    private Usuario activeUser;
    
   
    /**
     * Creates new form PnlGroupGestor
     */
    public PnlMantenimientoUsuarios(java.awt.Frame parent, boolean modal, Mantenimiento manager, LanguageUtils language, Usuario activeUser) {
        super(parent, modal);
            
        this.language       = language;
        this.activeUser     = activeUser;
        this.manager        = manager;
        
        initComponents();
        setLocationRelativeTo(null);
        prepararTextos();
        setCombos();
        listarUsuarios();
    }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        cmdClose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        comboRol = new javax.swing.JComboBox();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        fldNombre = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        lblRol = new javax.swing.JLabel();
        cmdFilter = new javax.swing.JButton();
        cmdClearFilter = new javax.swing.JButton();
        btnExplore = new javax.swing.JButton();
        comboUni = new javax.swing.JComboBox();
        lblUni = new javax.swing.JLabel();
        lblActivos = new javax.swing.JLabel();
        comboActivos = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jToolBar1.setRollover(true);

        cmdClose.setText("Cerrar");
        cmdClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCloseActionPerformed(evt);
            }
        });

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblData);

        btnAdd.setText("Nuevo");
        btnAdd.setFocusable(false);
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setText("Editar");
        btnEdit.setFocusable(false);
        btnEdit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEdit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Eliminar");
        btnDelete.setFocusable(false);
        btnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblNombre.setText("Nombre");

        lblRol.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblRol.setText("rol");

        cmdFilter.setText("Filtrar");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        cmdClearFilter.setText("Limpiar Filtro");
        cmdClearFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdClearFilterActionPerformed(evt);
            }
        });

        btnExplore.setText("Explorar");
        btnExplore.setFocusable(false);
        btnExplore.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExplore.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExplore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExploreActionPerformed(evt);
            }
        });

        lblUni.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblUni.setText("Universidad");

        lblActivos.setText("Activos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addGap(0, 0, 0)
                        .addComponent(btnEdit)
                        .addGap(0, 0, 0)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnExplore)
                        .addGap(20, 20, 20)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(lblRol, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblUni))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(comboRol, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblNombre))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(comboUni, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblActivos)))
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fldNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                                    .addComponent(comboActivos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmdClearFilter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                    .addComponent(cmdClose, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cmdFilter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnAdd)
                        .addComponent(btnEdit)
                        .addComponent(btnDelete)
                        .addComponent(btnExplore)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboRol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNombre)
                    .addComponent(lblRol)
                    .addComponent(cmdClearFilter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdFilter)
                    .addComponent(lblUni)
                    .addComponent(comboUni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboActivos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblActivos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmdClose)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//Establece los textos segun idioma seleccionado      
   private void prepararTextos() {
       
       this.setTitle(language.getProperty("mantenimiento.usermain.title"));
       this.btnAdd.setText         (language.getProperty("mantenimiento.Nuevo"));
       this.btnEdit.setText        (language.getProperty("mantenimiento.Editar"));
       this.btnDelete.setText      (language.getProperty("mantenimiento.Eliminar"));
       this.btnExplore.setText     (language.getProperty("mantenimiento.Ver"));
       this.cmdClose.setText       (language.getProperty("mantenimiento.usermain.back"));
       this.lblRol.setText         (language.getProperty("mantenimiento.usermain.rol"));
       this.lblNombre.setText        (language.getProperty("mantenimiento.usermain.name"));
       this.cmdFilter.setText      (language.getProperty("mantenimiento.usermain.dofilter"));
       this.cmdClearFilter.setText (language.getProperty("mantenimiento.usermain.clearfilter"));
       this.lblUni.setText     (language.getProperty("mantenimiento.usermain.universidad"));
       this.lblActivos.setText     (language.getProperty("mantenimiento.usermain.activos"));
       this.fldNombre.setText("");
   }

//Carga los combos de la pantalla 
   private void setCombos() {
        comboRol.removeAll();
        List<AuxiliarCombo> roles = new ArrayList<AuxiliarCombo>();
        try {
           roles = manager.getRoles();
        } catch (Exception ex) {
            Logger.getLogger(PnlMantenimientoActividadGestor.class.getName()).log(Level.SEVERE, null, ex);
        }
        comboRol.addItem(new ComboItem("Todos",0));
        for(AuxiliarCombo rol: roles) {
        comboRol.addItem(new ComboItem(rol.getNombre(),rol.getId()));
        } 
        
        comboUni.removeAll();
        List<AuxiliarCombo> universidades = new ArrayList<AuxiliarCombo>();
        try {
           universidades= manager.getUniversidades();
        } catch (Exception ex) {
            Logger.getLogger(PnlMantenimientoActividadGestor.class.getName()).log(Level.SEVERE, null, ex);
        }
        comboUni.addItem(new ComboItem("Todas",0));
        for(AuxiliarCombo universidad: universidades) {
        comboUni.addItem(new ComboItem(universidad.getNombre(),universidad.getId()));
        } 
        
        comboActivos.addItem(new ComboItem(language.getProperty("mantenimiento.Si"), 0));
        comboActivos.addItem(new ComboItem(language.getProperty("mantenimiento.No"), 1));

    }
   
//Se escoge 'Alta de Usuario'  
   private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
           PnlMantenimientoUsuarioGestor form = new PnlMantenimientoUsuarioGestor(null, true ,manager, language, "Add", 0);
           form.setLocationRelativeTo(null);
           form.setVisible(true);
           listarUsuarios();
   }//GEN-LAST:event_btnAddActionPerformed

//Se escoge 'Edición de Usuario'  
   private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
       //No hay fila seleccionada
      if (tblData.getSelectedRow() < 0)
      {
         JOptionPane.showMessageDialog(null,
                                       language.getProperty("mantenimiento.msg.sele.usuario"),
                                       language.getProperty("app.title"),
                                       JOptionPane.WARNING_MESSAGE);
         return;
      }
      //Hay fila seleccionada
      Usuario usuario = usuarios.get(tblData.getSelectedRow());
      PnlMantenimientoUsuarioGestor form = new PnlMantenimientoUsuarioGestor(null, true, manager, language, "Edit", usuario.getId());
      form.setLocationRelativeTo(null);
      form.setVisible(true);
      listarUsuarios();
   }//GEN-LAST:event_btnEditActionPerformed

//Cerrar el Formulario
   private void cmdCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCloseActionPerformed

      // Cierra el formulario
      this.dispose();

   }//GEN-LAST:event_cmdCloseActionPerformed

//Se escoge Desactivar Usuario
   private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
      //No hay fila seleccionada
      if (tblData.getSelectedRow() < 0)
      {
         JOptionPane.showMessageDialog(null,
                                       language.getProperty("mantenimiento.msg.sele.usuario"),
                                       language.getProperty("app.title"),
                                       JOptionPane.WARNING_MESSAGE);
         return;
      }
      //Hay fila seleccionada
      Usuario usuario = usuarios.get(tblData.getSelectedRow());
      
      //El usuario seleccionado es el propio usuario
      if (usuario.getId() == this.activeUser.getId()) {
          JOptionPane.showMessageDialog(null,
                                       language.getProperty("mantenimiento.err.deown"),
                                       language.getProperty("app.title"),
                                       JOptionPane.WARNING_MESSAGE);
         return;
      }
      
      //Se desactivará usuario si se responde afirmativamente
      Object[] options = {language.getProperty("opt.si"), language.getProperty("opt.no")};
      int reply = JOptionPane.showOptionDialog(this, language.getProperty("mantenimientomsg.dele.usuario"), 
                                               language.getProperty("app.title"), JOptionPane.YES_NO_OPTION, 
                                               JOptionPane.QUESTION_MESSAGE, null, options, usuario);
      if (reply == 0) {
        try {
            manager.deleteUsuario(usuario.getId());
        
      }
      catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, 
                                          language.getProperty("err.sql") + "\n" + language.getProperty("err.detail") + ":\n\n" + ex.getMessage(), 
                                          language.getProperty("app.title"), 
                                          JOptionPane.ERROR_MESSAGE);
      }
      catch (Exception ex) {
            JOptionPane.showMessageDialog(null, 
                                          language.getProperty("err.generic") + "\n" + language.getProperty("err.detail") + ":\n\n" + ex.getMessage(), 
                                          language.getProperty("app.title"), 
                                          JOptionPane.ERROR_MESSAGE);
      }
      
      listarUsuarios();
      }
   }//GEN-LAST:event_btnDeleteActionPerformed

//Botón Filtrar  
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
            this.dofilter = true;
            listarUsuarios();
    }//GEN-LAST:event_cmdFilterActionPerformed

//Botón Limpiar Filtro
    private void cmdClearFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdClearFilterActionPerformed
        // TODO add your handling code here:
        this.comboRol.setSelectedIndex(0);
        this.comboUni.setSelectedIndex(0);
        this.comboActivos.setSelectedIndex(0);
        this.fldNombre.setText("");
        this.dofilter = false;
        this.btnDelete.setEnabled(true);
            this.btnEdit.setEnabled(true);
        listarUsuarios();
    }//GEN-LAST:event_cmdClearFilterActionPerformed

//Consultar Usuario 
    private void btnExploreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExploreActionPerformed
        // No hay fila seleccionada
        if (tblData.getSelectedRow() < 0)
      {
         JOptionPane.showMessageDialog(null,
                                       language.getProperty("mantenimiento.msg.sele.usuario"),
                                       language.getProperty("app.title"),
                                       JOptionPane.WARNING_MESSAGE);
         return;
      }
      //Hay fila seleccionada
      Usuario usuario = usuarios.get(tblData.getSelectedRow());
      PnlMantenimientoUsuarioGestor form = new PnlMantenimientoUsuarioGestor(null, true, manager, language, "Explore", usuario.getId());
      form.setLocationRelativeTo(null);
      form.setVisible(true);
    }//GEN-LAST:event_btnExploreActionPerformed

//Cargar todos los usuarios
    private void todosUsuarios() throws SQLException, RemoteException, Exception {
        ArrayList<String> header = new ArrayList<String>();   // cabecera
      
        header.add(language.getProperty("mantenimiento.usermain.login"));
        header.add(language.getProperty("mantenimiento.usermain.DNI"));
        header.add(language.getProperty("mantenimiento.usermain.name"));
        header.add(language.getProperty("mantenimiento.usermain.surname"));
        header.add(language.getProperty("mantenimiento.usermain.rol"));
        
        String[][] gridData;
        
        usuarios = manager.getUsuarios();
        gridData = new String[usuarios.size()][5];
        
        int i = 0;
        for (Usuario usuario : usuarios) {
            gridData[i][0] = usuario.getLogin();
            gridData[i][1] = usuario.getNif();
            gridData[i][2] = usuario.getNombre();
            gridData[i][3] = usuario.getApellidos();
            gridData[i][4] = usuario.getDescrol();
            i++;
        }
        
        this.tblData.setModel(new javax.swing.table.DefaultTableModel(gridData, header.toArray())
            {@Override public boolean isCellEditable(int row, int column)
                { return false; } 
            });
    }

//Filtrar usuarios
    private void filtrarUsuarios() throws SQLException, RemoteException, Exception {
        ArrayList<String> header = new ArrayList<String>();   // cabecera
      
        header.add(language.getProperty("mantenimiento.usermain.login"));
        header.add(language.getProperty("mantenimiento.usermain.DNI"));
        header.add(language.getProperty("mantenimiento.usermain.name"));
        header.add(language.getProperty("mantenimiento.usermain.surname"));
        header.add(language.getProperty("mantenimiento.usermain.rol"));
      
        String[][] gridData;
       if (comboActivos.getSelectedIndex()==0){
        usuarios = manager.getUsuarios();
                    this.btnDelete.setEnabled(true);
            this.btnEdit.setEnabled(true);
        }else{
            usuarios=manager.getUsuariosInactivos();
            this.btnDelete.setEnabled(false);
            this.btnEdit.setEnabled(false);
        }
        gridData = new String[usuarios.size()][5];
        int i = 0;
        for (Usuario usuario: usuarios) {
            if ( usuario.getNombre().contains(this.fldNombre.getText())) {
                if(comboUni.getSelectedIndex()==0 && comboRol.getSelectedIndex()==0){
                    gridData[i][0] = usuario.getLogin();
                    gridData[i][1] = usuario.getNif();
                    gridData[i][2] = usuario.getNombre();
                    gridData[i][3] = usuario.getApellidos();
                    gridData[i][4] = usuario.getDescrol();
                    i++;
                } 
                if(comboUni.getSelectedIndex()>0 && comboRol.getSelectedIndex()==0){
                  if(usuario.getUniversidadId()==((ComboItem)comboUni.getSelectedItem()).getId()){
                    gridData[i][0] = usuario.getLogin();
                    gridData[i][1] = usuario.getNif();
                    gridData[i][2] = usuario.getNombre();
                    gridData[i][3] = usuario.getApellidos();
                    gridData[i][4] = usuario.getDescrol();
                    i++;
                  }
                } 
                 if(comboUni.getSelectedIndex()==0 && comboRol.getSelectedIndex()>0){
                  if(usuario.getIdRol()==((ComboItem)comboRol.getSelectedItem()).getId()){
                    gridData[i][0] = usuario.getLogin();
                    gridData[i][1] = usuario.getNif();
                    gridData[i][2] = usuario.getNombre();
                    gridData[i][3] = usuario.getApellidos();
                    gridData[i][4] = usuario.getDescrol();
                    i++;
                  }
                } 
                 if(comboUni.getSelectedIndex()>0 && comboRol.getSelectedIndex()>0){
                  if(usuario.getIdRol()==((ComboItem)comboRol.getSelectedItem()).getId() && usuario.getUniversidadId()==((ComboItem)comboUni.getSelectedItem()).getId()){
                    gridData[i][0] = usuario.getLogin();
                    gridData[i][1] = usuario.getNif();
                    gridData[i][2] = usuario.getNombre();
                    gridData[i][3] = usuario.getApellidos();
                    gridData[i][4] = usuario.getDescrol();
                    i++;
                } 
                }
            }
        }
        this.tblData.setModel(new javax.swing.table.DefaultTableModel(gridData, header.toArray())
            {@Override public boolean isCellEditable(int row, int column)
                { return false; } 
            });
    }
   
//Escoger entre listar todos los usuarios o los usuarios filtrados
   private void listarUsuarios()
   {
      try {
          if (!this.dofilter) {
              todosUsuarios();
          }
          else {
              filtrarUsuarios();
          }
      } 
      catch (SQLException ex)
      {
         JOptionPane.showMessageDialog(null, 
                                       language.getProperty("err.sql") + "\n" + language.getProperty("err.detail") + ":\n\n" + ex.getMessage(), 
                                       language.getProperty("app.title"), 
                                       JOptionPane.ERROR_MESSAGE);
      }
      catch (RemoteException ex)
      {
         JOptionPane.showMessageDialog(null, 
                                       language.getProperty("err.rmi") + "\n" + language.getProperty("err.detail") + ":\n\n" + ex.getMessage(), 
                                       language.getProperty("app.title"), 
                                       JOptionPane.ERROR_MESSAGE);

      }
      catch (Exception ex) 
      {
         JOptionPane.showMessageDialog(null, 
                                       language.getProperty("err.generic") + "\n" + language.getProperty("err.detail") + ":\n\n" + ex.getMessage(), 
                                       language.getProperty("app.title"), 
                                       JOptionPane.ERROR_MESSAGE);
      }
   }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExplore;
    private javax.swing.JButton cmdClearFilter;
    private javax.swing.JButton cmdClose;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JComboBox comboActivos;
    private javax.swing.JComboBox comboRol;
    private javax.swing.JComboBox comboUni;
    private javax.swing.JTextField fldNombre;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblActivos;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblRol;
    private javax.swing.JLabel lblUni;
    private javax.swing.JTable tblData;
    // End of variables declaration//GEN-END:variables
}
