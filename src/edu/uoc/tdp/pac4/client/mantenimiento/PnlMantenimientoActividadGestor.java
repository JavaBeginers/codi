package edu.uoc.tdp.pac4.client.mantenimiento;

import edu.uoc.tdp.pac4.util.DateTimeUtils;
import edu.uoc.tdp.pac4.beans.Actividad;
import edu.uoc.tdp.pac4.beans.Aula;
import edu.uoc.tdp.pac4.beans.Centro;
import edu.uoc.tdp.pac4.beans.Universitat;
import edu.uoc.tdp.pac4.beans.Usuario;
import edu.uoc.tdp.pac4.remote.Mantenimiento;
import edu.uoc.tdp.pac4.util.LanguageUtils;
import edu.uoc.tdp.pac4.util.FieldLimit;

import edu.uoc.tdp.pac4.eAcademiaEU;
import edu.uoc.tdp.pac4.util.ComboItem;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author JavaBeginers
 */
public class PnlMantenimientoActividadGestor extends javax.swing.JDialog {

    private final Mantenimiento manager;
    private final LanguageUtils language;
    private List<ComboItem> tiposActividad;
    private List<ComboItem> universidades;

    private final String actionType;

    private final Date now = new Date();
    private final SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    private Actividad actividad = null;
    private final int actividadID;
    private final int NAME_LENGTH = 50;
    private final Usuario usuario;

    /**
     * Creates new form PnlGroupGestor
     *
     * @param parent
     * @param modal
     * @param manager
     */
    public PnlMantenimientoActividadGestor(PnlMantenimientoActividades parent, boolean modal, Mantenimiento manager, LanguageUtils language, String actionType, int actividadID, Usuario usuario) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

        this.manager = manager;
        this.language = language;
        this.actionType = actionType;
        this.actividadID = actividadID;
        this.usuario = usuario;

        addaptToPreferences();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        cmdClose = new javax.swing.JButton();
        fldTitulo = new javax.swing.JTextField();
        lblTitulo = new javax.swing.JLabel();
        cmdAccept = new javax.swing.JButton();
        lblDateIni = new javax.swing.JLabel();
        lblDateMaximaInscripcion = new javax.swing.JLabel();
        fldDateIni = new javax.swing.JFormattedTextField();
        fldDateMaximaInscripcion = new javax.swing.JFormattedTextField();
        lblTipoActividad = new javax.swing.JLabel();
        cboTipoActividad = new javax.swing.JComboBox();
        lblUniversidad = new javax.swing.JLabel();
        cboUniversidad = new javax.swing.JComboBox();
        lblCentro = new javax.swing.JLabel();
        cboCentro = new javax.swing.JComboBox();
        lblSitio = new javax.swing.JLabel();
        cboSitio = new javax.swing.JComboBox();
        lblAreaConocimiento = new javax.swing.JLabel();
        lblEspecialización = new javax.swing.JLabel();
        fldEspecializacion = new javax.swing.JTextField();
        lblDecanatura = new javax.swing.JLabel();
        fldDecanatura = new javax.swing.JTextField();
        lblInvestigador = new javax.swing.JLabel();
        fldInvestigador = new javax.swing.JTextField();
        lblCambios = new javax.swing.JLabel();
        fldCambios = new javax.swing.JFormattedTextField();
        lblPrecio = new javax.swing.JLabel();
        fldPrecio = new javax.swing.JFormattedTextField();
        cbCancelada = new javax.swing.JCheckBox();
        fldAreaConocimiento = new javax.swing.JTextField();
        lblDateFin = new javax.swing.JLabel();
        fldDateFin = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jToolBar1.setRollover(true);

        cmdClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/arrow-curve-180.png"))); // NOI18N
        cmdClose.setText("Cerrar");
        cmdClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCloseActionPerformed(evt);
            }
        });

        lblTitulo.setText("Título");

        cmdAccept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ok_st_obj.gif"))); // NOI18N
        cmdAccept.setText("Acceptar");
        cmdAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAcceptActionPerformed(evt);
            }
        });

        lblDateIni.setText("Fecha Inicio");

        lblDateMaximaInscripcion.setText("Fecha Máxima Inscripción");

        fldDateIni.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        fldDateIni.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        fldDateMaximaInscripcion.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        fldDateMaximaInscripcion.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        lblTipoActividad.setText("Tipos de Actividad");

        cboTipoActividad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTipoActividadActionPerformed(evt);
            }
        });

        lblUniversidad.setText("Universidad");

        cboUniversidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboUniversidadActionPerformed(evt);
            }
        });

        lblCentro.setText("Centro");

        cboCentro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboCentroActionPerformed(evt);
            }
        });

        lblSitio.setText("Sitio");

        cboSitio.setEnabled(false);
        cboSitio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSitioActionPerformed(evt);
            }
        });

        lblAreaConocimiento.setText("Área de conocimiento");

        lblEspecialización.setText("Especialización");

        lblDecanatura.setText("Decanatura Responsable");

        lblInvestigador.setText("Investigador Principal");

        lblCambios.setText("% de incritos que bloquea cambios");

        fldCambios.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fldCambios.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        lblPrecio.setText("Precio");

        fldPrecio.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        fldPrecio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        cbCancelada.setText("Cancelada");
        cbCancelada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCanceladaActionPerformed(evt);
            }
        });

        lblDateFin.setText("Fecha Fin");

        fldDateFin.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        fldDateFin.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cmdAccept)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdClose)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCentro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblDecanatura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(20, 20, 20))
                            .addComponent(lblUniversidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblDateFin, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                                .addGap(173, 173, 173))
                            .addComponent(lblTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTipoActividad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAreaConocimiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(42, 42, 42))
                            .addComponent(lblSitio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblEspecialización, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblInvestigador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPrecio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(81, 81, 81))
                            .addComponent(lblCambios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDateIni, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDateMaximaInscripcion, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fldDateMaximaInscripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fldPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboTipoActividad, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboUniversidad, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboCentro, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboSitio, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fldEspecializacion, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fldDecanatura, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fldTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fldInvestigador, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fldAreaConocimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fldCambios, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fldDateIni, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fldDateFin, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(216, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbCancelada)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTipoActividad)
                    .addComponent(cboTipoActividad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUniversidad)
                    .addComponent(cboUniversidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCentro)
                    .addComponent(cboCentro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboSitio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSitio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAreaConocimiento)
                    .addComponent(fldAreaConocimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEspecialización)
                    .addComponent(fldEspecializacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitulo)
                    .addComponent(fldTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDecanatura)
                    .addComponent(fldDecanatura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInvestigador)
                    .addComponent(fldInvestigador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCambios)
                    .addComponent(fldCambios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPrecio)
                    .addComponent(fldPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDateIni)
                    .addComponent(fldDateIni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDateFin)
                    .addComponent(fldDateFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fldDateMaximaInscripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDateMaximaInscripcion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbCancelada)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdClose)
                    .addComponent(cmdAccept))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean allDataFilled() {
        //TODO: validate
        //Tipo de actividad no puede ser vacía
        if (cboTipoActividad.getSelectedIndex() < 1) {
            return false;
        }
        //Universidad no puede ser vacía
        if (cboUniversidad.getSelectedIndex() < 1) {
            return false;
        }
        //Centro no puede ser vacío
        if (cboCentro.getSelectedIndex() < 1) {
            return false;
        }
        //Aula no puede ser vacía
        if (cboSitio.getSelectedIndex() < 1) {
            return false;
        }
        //Titulo no puede ser vacía
        if (fldTitulo.getText().isEmpty()) {
            return false;
        }
        //Fecha inicio inscripción no puede ser vacía
        if (fldDateIni.getText().isEmpty()) {
            return false;
        }
        //Fecha fin inscripción no puede ser vacía
        if (fldDateFin.getText().isEmpty()) {
            return false;
        }
        //Fecha maxima inscripción no puede ser vacía
        if (fldDateMaximaInscripcion.getText().isEmpty()) {
            return false;
        }
        //No se pueden solapar activitats del mateix tipus en el mateix centre docent
        int tipusActivitat = ((ComboItem) cboTipoActividad.getSelectedItem()).getId();
        int centreId = ((ComboItem) cboCentro.getSelectedItem()).getId();
        Date iniActividad = DateTimeUtils.strToDate(this.fldDateIni.getText());
        Date endActividad = DateTimeUtils.strToDate(this.fldDateFin.getText());
        try {
            if (this.actionType.equalsIgnoreCase("Add")) {
                if (!manager.canAddActivity(tipusActivitat, centreId, iniActividad, endActividad)) {
                    return false;
                }
            } else {
                if (!manager.canUpdateActivity(actividadID, tipusActivitat, centreId, iniActividad, endActividad)) {
                    return false;
                }
            }
        } catch(SQLException sqlex) {
            return false;
        } catch(Exception ex) {
            return false;
        }

        return true;
    }

    private void setLabelsLanguage() {
        /*
         * Definimos el texto de las labels del panel en función del idioma seleccionado
         */
        lblTipoActividad.setText(language.getProperty("mantenimiento.actividad.tipo.actividad"));
        lblUniversidad.setText(language.getProperty("mantenimiento.actividad.universidad"));
        lblCentro.setText(language.getProperty("mantenimiento.actividad.centro"));
        lblSitio.setText(language.getProperty("mantenimiento.actividad.sitio"));
        lblAreaConocimiento.setText(language.getProperty("mantenimiento.actividad.area.conocimiento"));
        lblEspecialización.setText(language.getProperty("mantenimiento.actividad.area.especializacion"));
        lblTitulo.setText(language.getProperty("mantenimiento.actividad.titulo"));
        lblDecanatura.setText(language.getProperty("mantenimiento.actividad.decanatura"));
        lblInvestigador.setText(language.getProperty("mantenimiento.actividad.investigador"));
        lblCambios.setText(language.getProperty("mantenimiento.actividad.cambios"));
        lblPrecio.setText(language.getProperty("mantenimiento.actividad.precio"));
        lblDateIni.setText(language.getProperty("mantenimiento.actividad.fechaini"));
        lblDateFin.setText(language.getProperty("mantenimiento.actividad.fechaend"));
        lblDateMaximaInscripcion.setText(language.getProperty("mantenimiento.actividad.fechamaximainscripcion"));
        cbCancelada.setText(language.getProperty("mantenimiento.actividad.cancelada"));

        if (this.actionType.equalsIgnoreCase("Add")) {
            this.cmdAccept.setText(language.getProperty("mantenimiento.usermain.newUser"));
        } else if (this.actionType.equalsIgnoreCase("Edit")) {
            this.cmdAccept.setText(language.getProperty("mantenimiento.usermain.modUser"));
        }
        this.cmdClose.setText(language.getProperty("mantenimiento.usermain.back"));
    }

    private void addaptToPreferences() {
        /*
         * El mismo panel se usa para añadir/modificar usuarios, hay que adaptar ciertas características
         * en función de qué se solicite
         */
        this.setLabelsLanguage();

        this.fldTitulo.setDocument(new FieldLimit(NAME_LENGTH));

        // Cambios Vinculados al tipo de llamada
        if (this.actionType.equalsIgnoreCase("Add")) {
            this.addaptToAddActividad();
        } else if (this.actionType.equalsIgnoreCase("Edit")) {
            this.addaptToEditActividad();
        }
    }

    private void addaptToAddActividad() {

        //Titulo de la cabecera
        this.setTitle(language.getProperty("mantenimiento.main.title") + ". "
                + language.getProperty("mantenimiento.main.aula") + ". "
                + language.getProperty("mantenimiento.usermain.newUser"));

        //Inicializamos el combo de tipo de actividad
        setTipoActividades();
        //Inicializamos el combo de universidades
        setUniversidades();
        //Inicializamos Centros
        setCentros();
        //Inicializamos todos los campos
        cboTipoActividad.setSelectedIndex(0);
        cboUniversidad.setSelectedIndex(0);
        cboCentro.setSelectedIndex(0);
        cboSitio.setSelectedIndex(-1);
        fldAreaConocimiento.setText("");
        fldEspecializacion.setText("");
        fldTitulo.setText("");
        fldDecanatura.setText("");
        fldInvestigador.setText("");
        fldCambios.setText("");
        fldPrecio.setText("");
        cbCancelada.setSelected(false);

        fldDateIni.setText("");
        fldDateFin.setText("");
        fldDateMaximaInscripcion.setText("");

        this.cmdAccept.setText(language.getProperty("mantenimiento.usermain.newUser"));

    }

    private void addaptToEditActividad() {

        this.setTitle(language.getProperty("mantenimiento.main.title") + ". "
                + language.getProperty("mantenimiento.main.user") + ". "
                + language.getProperty("mantenimiento.usermain.modUser"));

        /*
        * Cuando vamos a modificar un usuario, inicializamos los formularios con los valores
        * que tiene el usuario
         */
        try {
            this.actividad = manager.getActividad(this.actividadID);

            //Inicializamos el combo de tipo de actividad
            setTipoActividades(actividad.getTipus());
            //Inicializamos el combo de universidades
            setUniversidades(Math.toIntExact(actividad.getUniversitatId()));
            //Inicializamos Centros
            setCentros(actividad.getCentreId(), actividad.getAulaId());
            this.fldAreaConocimiento.setText(actividad.getArea());
            this.fldEspecializacion.setText(actividad.getEspecialitat());
            this.fldTitulo.setText(actividad.getTitol());
            this.fldDecanatura.setText(actividad.getDecanatura());
            this.fldInvestigador.setText(actividad.getInvestigator());
            this.fldCambios.setText(String.valueOf(actividad.getMinimPercentatge()));
            this.fldPrecio.setText(String.valueOf(actividad.getPreu()));
            if (actividad.getDataInici() != null) {
                this.fldDateIni.setText(df.format(actividad.getDataInici()));
            } else {
                this.fldDateIni.setText("");
            }
            if (actividad.getDataFi() != null) {
                this.fldDateFin.setText(df.format(actividad.getDataFi()));
            } else {
                this.fldDateFin.setText("");
            }
            if (actividad.getDataMaxInscripcio() != null) {
                this.fldDateMaximaInscripcion.setText(df.format(actividad.getDataMaxInscripcio()));
            } else {
                this.fldDateMaximaInscripcion.setText("");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    language.getProperty("err.sql") + "\n" + language.getProperty("err.detail") + ":\n\n" + ex.getMessage(),
                    language.getProperty("app.title"),
                    JOptionPane.ERROR_MESSAGE);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,
                    language.getProperty("err.generic") + "\n" + language.getProperty("err.detail") + ":\n\n" + ex.getMessage(),
                    language.getProperty("app.title"),
                    JOptionPane.ERROR_MESSAGE);

        }

        this.cmdAccept.setText(language.getProperty("mantenimiento.usermain.modUser"));
        //Validar si se pueden modificar las fechas
        int numInscripciones;
        try {
            numInscripciones = manager.getInscritosByActividadId(actividad.getId());
            int capacidad = manager.getCapacidadByAulaId(Math.toIntExact(actividad.getAulaId()));
            if (((numInscripciones / capacidad) * 100) > actividad.getMinimPercentatge()
                    || actividad.getDataMaxInscripcio().getTime() < new Date().getTime()) {
                fldDateIni.setEditable(false);
                fldDateFin.setEditable(false);
                fldDateMaximaInscripcion.setEditable(false);
            }
        } catch (Exception ex) {
            Logger.getLogger(PnlMantenimientoActividadGestor.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

   private void cmdCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCloseActionPerformed

       /*
     * Cerramos el formulario
        */
       this.dispose();

   }//GEN-LAST:event_cmdCloseActionPerformed

    private void cmdAddActividadAction() {
        /*
         * Gestión de Añadir Nuevo Usuario
         * Creamos una instancia Usuario con toda la info recibida y luego la pasamos al manager
         * para que la incluya en la BD
         * 
         * Si añadimos correctamente se cierra el panel
         */

        Date iniActividad = DateTimeUtils.strToDate(this.fldDateIni.getText());
        Date endActividad = DateTimeUtils.strToDate(this.fldDateFin.getText());

        if (!DateTimeUtils.isDate(this.fldDateIni.getText())
                || !DateTimeUtils.isDate(this.fldDateMaximaInscripcion.getText())) {
            JOptionPane.showMessageDialog(null,
                    language.getProperty("mantenimiento.err.date.mal"),
                    language.getProperty("app.title"),
                    JOptionPane.ERROR_MESSAGE);
            return;
        } else if (endActividad.before(iniActividad)) {
            JOptionPane.showMessageDialog(null,
                    language.getProperty("mantenimiento.err.date.reverse"),
                    language.getProperty("app.title"),
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            this.actividad = new Actividad();

            actividad.setTipus(((ComboItem) cboTipoActividad.getSelectedItem()).getId());
            actividad.setUniversitatId(((ComboItem) cboUniversidad.getSelectedItem()).getId());
            actividad.setCentreId(((ComboItem) cboCentro.getSelectedItem()).getId());
            actividad.setAulaId(((ComboItem) cboSitio.getSelectedItem()).getId());
            actividad.setArea(fldAreaConocimiento.getText());
            actividad.setEspecialitat(fldEspecializacion.getText());
            actividad.setTitol(fldTitulo.getText());
            actividad.setDecanatura(fldDecanatura.getText());
            actividad.setInvestigator(fldInvestigador.getText());
            try {
                actividad.setMinimPercentatge(new Double(this.fldCambios.getText()));
            } catch (NumberFormatException ex) {
            }
            try {
                actividad.setPreu(new Double(fldPrecio.getText()));
            } catch (NumberFormatException ex) {
            }
            actividad.setDataInici(iniActividad);
            actividad.setDataFi(endActividad);
            actividad.setDataMaxInscripcio(DateTimeUtils.strToDate(this.fldDateMaximaInscripcion.getText()));
            actividad.setCancelada(cbCancelada.isSelected());

            ArrayList<Actividad> actividades = manager.getActividadesInactivas();

            for (Actividad oldActividad : actividades) {
                if (actividad.getTitol().equalsIgnoreCase(oldActividad.getTitol())) {
                    if (manager.undeleteActividad(oldActividad.getId())) {
                        JOptionPane.showMessageDialog(null, language.getProperty("mantenimiento.msg.add.oldcurs"),
                                "Información", JOptionPane.INFORMATION_MESSAGE);
                        this.dispose();
                        return;
                    }
                }
            }

            if (manager.addActividad(actividad)) {
                JOptionPane.showMessageDialog(null, language.getProperty("mantenimiento.msg.add.curs"),
                        "Información", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    language.getProperty("err.sql") + "\n" + language.getProperty("err.detail") + ":\n\n" + ex.getMessage(),
                    language.getProperty("app.title"),
                    JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,
                    language.getProperty("err.generic") + "\n" + language.getProperty("err.detail") + ":\n\n" + ex.getMessage(),
                    language.getProperty("app.title"),
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cmdModActividadAction() {
        /*
         * Gestión de modificar Usuario
         * Creamos una instancia Usuario con toda la info recibida y luego la pasamos al manager
         * para que la actualize la BD (no se accede al UserID)
         * 
         * Para la modificacion solicitaremos confirmación
         * 
         * Si modificamos correctamente se cierra el panel
         */
        try {

            Date iniActividad = DateTimeUtils.strToDate(this.fldDateIni.getText());
            Date endActividad = DateTimeUtils.strToDate(this.fldDateFin.getText());

            if (!DateTimeUtils.isDate(this.fldDateIni.getText())
                    || !DateTimeUtils.isDate(this.fldDateMaximaInscripcion.getText())) {
                JOptionPane.showMessageDialog(null,
                        language.getProperty("mantenimiento.err.date.mal"),
                        language.getProperty("app.title"),
                        JOptionPane.ERROR_MESSAGE);
                return;
            } else if (endActividad.before(iniActividad)) {
                JOptionPane.showMessageDialog(null,
                        "fchas mal orden",
                        language.getProperty("mantenimiento.err.date.reverse"),
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            Actividad new_actividad = new Actividad();

            new_actividad.setId(this.actividadID);

            new_actividad.setTipus(((ComboItem) cboTipoActividad.getSelectedItem()).getId());
            new_actividad.setUniversitatId(((ComboItem) cboUniversidad.getSelectedItem()).getId());
            new_actividad.setCentreId(((ComboItem) cboCentro.getSelectedItem()).getId());
            new_actividad.setAulaId(((ComboItem) cboSitio.getSelectedItem()).getId());
            new_actividad.setArea(fldAreaConocimiento.getText());
            new_actividad.setEspecialitat(fldEspecializacion.getText());
            new_actividad.setTitol(fldTitulo.getText());
            new_actividad.setDecanatura(fldDecanatura.getText());
            new_actividad.setInvestigator(fldInvestigador.getText());
            try {
                new_actividad.setMinimPercentatge(new Double(this.fldCambios.getText()));
            } catch (NumberFormatException ex) {
            }
            try {
                new_actividad.setPreu(new Double(fldPrecio.getText()));
            } catch (NumberFormatException ex) {
            }
            new_actividad.setDataInici(iniActividad);
            new_actividad.setDataFi(endActividad);
            new_actividad.setDataMaxInscripcio(DateTimeUtils.strToDate(this.fldDateMaximaInscripcion.getText()));
            new_actividad.setCancelada(cbCancelada.isSelected());

            Object[] options = {language.getProperty("opt.si"), language.getProperty("opt.no")};
            int reply = JOptionPane.showOptionDialog(this, language.getProperty("mantenimiento.msg.confirm"), language.getProperty("app.title"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, now);
            if (reply == 0) {
                if (manager.updateActividad(new_actividad)) {
                    JOptionPane.showMessageDialog(null, language.getProperty("mantenimiento.msg.modif"),
                            "Información", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            this.dispose();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    language.getProperty("err.sql") + "\n" + language.getProperty("err.detail") + ":\n\n" + ex.getMessage(),
                    language.getProperty("app.title"),
                    JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,
                    language.getProperty("err.generic") + "\n" + language.getProperty("err.detail") + ":\n\n" + ex.getMessage(),
                    language.getProperty("app.title"),
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cmdAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAcceptActionPerformed
        /*
         * Las acciones sólo se llevaran a cabo si tenemos TODOS los campos llenos
         */
        if (!this.allDataFilled()) {
            JOptionPane.showMessageDialog(null,
                    language.getProperty("mantenimiento.err.fields"),
                    language.getProperty("app.title"),
                    JOptionPane.ERROR_MESSAGE);
        } else if (this.actionType.equalsIgnoreCase("Add")) {
            this.cmdAddActividadAction();
        } else if (this.actionType.equalsIgnoreCase("Edit")) {
            this.cmdModActividadAction();
        }
    }//GEN-LAST:event_cmdAcceptActionPerformed

    private void cboTipoActividadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTipoActividadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboTipoActividadActionPerformed

    private void cboUniversidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboUniversidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboUniversidadActionPerformed

    private void cboCentroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboCentroActionPerformed
        // TODO add your handling code here:
        if (cboCentro.getSelectedIndex() > 0) {
            try {
                // Limpiar el combo de aulas
                cboSitio.removeAllItems();
                //Actualitzar la llista de aules
                List<Aula> aulasByCentro;
                ComboItem item = (ComboItem) cboCentro.getSelectedItem();
                aulasByCentro = manager.getAulasByIdCentro(item.getId());
                List<ComboItem> aulasCB = new ArrayList<ComboItem>();

                aulasCB.add(new ComboItem(language.getProperty(eAcademiaEU.FORM_PNLACTIVIDAD_CENTRO_SELECCIONA), -1));
                for (Aula aula : aulasByCentro) {
                    aulasCB.add(new ComboItem(aula.getNombre(), aula.getId()));
                }
                cboSitio.setModel(new DefaultComboBoxModel(aulasCB.toArray()));
                //Habilitar el combo de sitios
                cboSitio.setEnabled(true);
            } catch (Exception ex) {
                Logger.getLogger(PnlMantenimientoActividadGestor.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            cboSitio.removeAllItems();
            cboSitio.setEnabled(false);
        }
    }//GEN-LAST:event_cboCentroActionPerformed

    private void cboSitioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboSitioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboSitioActionPerformed

    private void cbCanceladaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCanceladaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCanceladaActionPerformed

    //Inicializamos Centros
    private void setCentros(long centreId, long aulaId) {

        List<ComboItem> centrosCB;
        centrosCB = new ArrayList<ComboItem>();
        List<Centro> centros = new ArrayList<Centro>();
        int index = 0;

        try {
            centros = manager.getCentros();
        } catch (Exception ex) {
            Logger.getLogger(PnlMantenimientoActividadGestor.class.getName()).log(Level.SEVERE, null, ex);
        }

        centrosCB.add(new ComboItem(language.getProperty(eAcademiaEU.FORM_PNLACTIVIDAD_CENTRO_SELECCIONA), -1));
        for (int i = 0; i < centros.size(); i++) {
            if (centreId == centros.get(i).getId()) {
                index = i + 1;
            }
            centrosCB.add(new ComboItem(centros.get(i).getNom(), centros.get(i).getId()));
        }
        cboCentro.removeAll();
        cboCentro.setModel(new DefaultComboBoxModel(centrosCB.toArray()));
        cboCentro.setSelectedIndex(index);
        index = 0;
        for (int i = 0; i < cboSitio.getComponentCount(); i++) {
            if (aulaId == ((ComboItem) cboSitio.getItemAt(i)).getId()) {
                index = i;
            }
        }
        cboSitio.setSelectedIndex(index);
    }

    private void setCentros() {

        List<ComboItem> centrosCB;
        centrosCB = new ArrayList<ComboItem>();
        List<Centro> centros = new ArrayList<Centro>();
        try {
            centros = manager.getCentros();
        } catch (Exception ex) {
            Logger.getLogger(PnlMantenimientoActividadGestor.class.getName()).log(Level.SEVERE, null, ex);
        }

        centrosCB.add(new ComboItem(language.getProperty(eAcademiaEU.FORM_PNLACTIVIDAD_CENTRO_SELECCIONA), -1));
        for (Centro centro : centros) {
            centrosCB.add(new ComboItem(centro.getNom(), centro.getId()));
        }
        cboCentro.removeAll();
        cboCentro.setModel(new DefaultComboBoxModel(centrosCB.toArray()));

    }

    private void setUniversidades() {

        List<ComboItem> universidadesCB;
        universidadesCB = new ArrayList<ComboItem>();
        List<Universitat> universidades = new ArrayList<Universitat>();
        try {
            universidades = manager.getUniversidadesRaw();
        } catch (Exception ex) {
            Logger.getLogger(PnlMantenimientoActividadGestor.class.getName()).log(Level.SEVERE, null, ex);
        }

        universidadesCB.add(new ComboItem(language.getProperty(eAcademiaEU.FORM_PNLACTIVIDAD_UNIVERSIDAD_SELECCIONA), -1));
        for (Universitat universidad : universidades) {
            if(usuario.getUniversidadId()==universidad.getUniversitat_id()) {
                universidadesCB.add(new ComboItem(universidad.getNom(), universidad.getUniversitat_id()));
            }
        }
        cboUniversidad.removeAll();
        cboUniversidad.setModel(new DefaultComboBoxModel(universidadesCB.toArray()));

    }

    private void setTipoActividades() {

        if (tiposActividad == null) {
            tiposActividad = new ArrayList<ComboItem>();
        }
        ComboItem cb = new ComboItem(language.getProperty(eAcademiaEU.FORM_PNLACTIVIDAD_TIPO_ACTIVIDAD_SELECCIONA), -1);
        tiposActividad.add(cb);
        tiposActividad.add(new ComboItem(Actividad.getTipoActividadName(Actividad.ACTIVIDAD_TIPO_CONGRESO_ID, language), Actividad.ACTIVIDAD_TIPO_CONGRESO_ID));
        tiposActividad.add(new ComboItem(Actividad.getTipoActividadName(Actividad.ACTIVIDAD_TIPO_JORNADA_ID, language), Actividad.ACTIVIDAD_TIPO_JORNADA_ID));
        tiposActividad.add(new ComboItem(Actividad.getTipoActividadName(Actividad.ACTIVIDAD_TIPO_MASTER_ID, language), Actividad.ACTIVIDAD_TIPO_MASTER_ID));
        tiposActividad.add(new ComboItem(Actividad.getTipoActividadName(Actividad.ACTIVIDAD_TIPO_CONFERENCIA_ID, language), Actividad.ACTIVIDAD_TIPO_CONFERENCIA_ID));
        cboTipoActividad.removeAll();
        cboTipoActividad.setModel(new DefaultComboBoxModel(tiposActividad.toArray()));

    }

    private void setTipoActividades(int tipus) {

        int index;
        if (tiposActividad == null) {
            tiposActividad = new ArrayList<ComboItem>();
        }
        tiposActividad.add(new ComboItem(language.getProperty(eAcademiaEU.FORM_PNLACTIVIDAD_TIPO_ACTIVIDAD_SELECCIONA), -1));
        tiposActividad.add(new ComboItem(Actividad.getTipoActividadName(Actividad.ACTIVIDAD_TIPO_CONGRESO_ID, language), Actividad.ACTIVIDAD_TIPO_CONGRESO_ID));
        tiposActividad.add(new ComboItem(Actividad.getTipoActividadName(Actividad.ACTIVIDAD_TIPO_JORNADA_ID, language), Actividad.ACTIVIDAD_TIPO_JORNADA_ID));
        tiposActividad.add(new ComboItem(Actividad.getTipoActividadName(Actividad.ACTIVIDAD_TIPO_MASTER_ID, language), Actividad.ACTIVIDAD_TIPO_MASTER_ID));
        tiposActividad.add(new ComboItem(Actividad.getTipoActividadName(Actividad.ACTIVIDAD_TIPO_CONFERENCIA_ID, language), Actividad.ACTIVIDAD_TIPO_CONFERENCIA_ID));
        switch (tipus) {
            case Actividad.ACTIVIDAD_TIPO_CONGRESO_ID:
                index = 1;
                break;
            case Actividad.ACTIVIDAD_TIPO_JORNADA_ID:
                index = 2;
                break;
            case Actividad.ACTIVIDAD_TIPO_MASTER_ID:
                index = 3;
                break;
            case Actividad.ACTIVIDAD_TIPO_CONFERENCIA_ID:
                index = 4;
                break;
            default:
                index = 0;
        }

        cboTipoActividad.removeAll();
        cboTipoActividad.setModel(new DefaultComboBoxModel(tiposActividad.toArray()));
        cboTipoActividad.setSelectedIndex(index);

    }

    private void setUniversidades(int universidad) {

        int index;
        if (universidades == null) {
            universidades = new ArrayList<ComboItem>();
        }
        //Buscar todas las universidades
        universidades.add(new ComboItem(language.getProperty(eAcademiaEU.FORM_PNLACTIVIDAD_UNIVERSIDAD_SELECCIONA), -1));
        universidades.add(new ComboItem(Actividad.getUniversidadName(Actividad.ACTIVIDAD_UNIVERSIDAD_UOC_ID, language), Actividad.ACTIVIDAD_UNIVERSIDAD_UOC_ID));
        universidades.add(new ComboItem(Actividad.getUniversidadName(Actividad.ACTIVIDAD_UNIVERSIDAD_UAB_ID, language), Actividad.ACTIVIDAD_UNIVERSIDAD_UAB_ID));
        universidades.add(new ComboItem(Actividad.getUniversidadName(Actividad.ACTIVIDAD_UNIVERSIDAD_UPC_ID, language), Actividad.ACTIVIDAD_UNIVERSIDAD_UPC_ID));
        universidades.add(new ComboItem(Actividad.getUniversidadName(Actividad.ACTIVIDAD_UNIVERSIDAD_UPF_ID, language), Actividad.ACTIVIDAD_UNIVERSIDAD_UPF_ID));
        switch (universidad) {
            case Actividad.ACTIVIDAD_UNIVERSIDAD_UOC_ID:
                index = 1;
                break;
            case Actividad.ACTIVIDAD_UNIVERSIDAD_UAB_ID:
                index = 2;
                break;
            case Actividad.ACTIVIDAD_UNIVERSIDAD_UPC_ID:
                index = 3;
                break;
            case Actividad.ACTIVIDAD_UNIVERSIDAD_UPF_ID:
                index = 4;
                break;
            default:
                index = 0;
        }

        cboUniversidad.removeAll();
        cboUniversidad.setModel(new DefaultComboBoxModel(universidades.toArray()));
        cboUniversidad.setSelectedIndex(index);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbCancelada;
    private javax.swing.JComboBox cboCentro;
    private javax.swing.JComboBox cboSitio;
    private javax.swing.JComboBox cboTipoActividad;
    private javax.swing.JComboBox cboUniversidad;
    private javax.swing.JButton cmdAccept;
    private javax.swing.JButton cmdClose;
    private javax.swing.JTextField fldAreaConocimiento;
    private javax.swing.JFormattedTextField fldCambios;
    private javax.swing.JFormattedTextField fldDateFin;
    private javax.swing.JFormattedTextField fldDateIni;
    private javax.swing.JFormattedTextField fldDateMaximaInscripcion;
    private javax.swing.JTextField fldDecanatura;
    private javax.swing.JTextField fldEspecializacion;
    private javax.swing.JTextField fldInvestigador;
    private javax.swing.JFormattedTextField fldPrecio;
    private javax.swing.JTextField fldTitulo;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblAreaConocimiento;
    private javax.swing.JLabel lblCambios;
    private javax.swing.JLabel lblCentro;
    private javax.swing.JLabel lblDateFin;
    private javax.swing.JLabel lblDateIni;
    private javax.swing.JLabel lblDateMaximaInscripcion;
    private javax.swing.JLabel lblDecanatura;
    private javax.swing.JLabel lblEspecialización;
    private javax.swing.JLabel lblInvestigador;
    private javax.swing.JLabel lblPrecio;
    private javax.swing.JLabel lblSitio;
    private javax.swing.JLabel lblTipoActividad;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblUniversidad;
    // End of variables declaration//GEN-END:variables
}
