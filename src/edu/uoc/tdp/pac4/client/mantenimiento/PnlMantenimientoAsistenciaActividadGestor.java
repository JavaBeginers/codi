package edu.uoc.tdp.pac4.client.mantenimiento;

import edu.uoc.tdp.pac4.beans.Actividad;
import edu.uoc.tdp.pac4.beans.Asistencia;
import edu.uoc.tdp.pac4.beans.Usuario;
import edu.uoc.tdp.pac4.remote.Mantenimiento;
import edu.uoc.tdp.pac4.util.LanguageUtils;

import edu.uoc.tdp.pac4.util.ComboItem;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author eSupport Netbeans
 */
public class PnlMantenimientoAsistenciaActividadGestor extends javax.swing.JDialog {

    private final Mantenimiento manager;
    private final LanguageUtils language;

    private final String actionType;

    private final Date now = new Date();
    private final SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    private Actividad actividad = null;
    private final int actividadID;
    private ArrayList<Asistencia> asistencias;

    /**
     * Creates new form PnlGroupGestor
     *
     * @param parent
     * @param modal
     * @param manager
     */
    public PnlMantenimientoAsistenciaActividadGestor(PnlMantenimientoActividades parent, boolean modal, Mantenimiento manager, LanguageUtils language, String actionType, int actividadID, Usuario usuario) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

        this.manager = manager;
        this.language = language;
        this.actionType = actionType;
        this.actividadID = actividadID;
        try {
            this.actividad = manager.getActividad(actividadID);
        } catch (Exception ex) {
            Logger.getLogger(PnlMantenimientoAsistenciaActividadGestor.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Llenar el grid con los alumnos matriculados y su asistencia,
        //Si todavia no se ha definido sale sin definir
        fillAsistencias();

        addaptToPreferences();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        cmdClose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        cmdAsistido = new javax.swing.JButton();
        cmdNoAsistido = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jToolBar1.setRollover(true);

        cmdClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/arrow-curve-180.png"))); // NOI18N
        cmdClose.setText("Cerrar");
        cmdClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCloseActionPerformed(evt);
            }
        });

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblData);

        cmdAsistido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/action_001.png"))); // NOI18N
        cmdAsistido.setText("Ha asistido");
        cmdAsistido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAsistidoActionPerformed(evt);
            }
        });

        cmdNoAsistido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/object_delete.gif"))); // NOI18N
        cmdNoAsistido.setText("No ha asistido");
        cmdNoAsistido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNoAsistidoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(cmdAsistido, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmdNoAsistido, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmdClose, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdNoAsistido)
                    .addComponent(cmdAsistido))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(cmdClose)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setLabelsLanguage() {
        /*
         * Definimos el texto de las labels del panel en función del idioma seleccionado
         */
//        lblTipoActividad.setText(language.getProperty("mantenimiento.actividad.tipo.actividad"));
//        lblUniversidad.setText(language.getProperty("mantenimiento.actividad.universidad"));
//        lblCentro.setText(language.getProperty("mantenimiento.actividad.centro"));
//        lblSitio.setText(language.getProperty("mantenimiento.actividad.sitio"));
//        lblAreaConocimiento.setText(language.getProperty("mantenimiento.actividad.area.conocimiento"));
//        lblEspecialización.setText(language.getProperty("mantenimiento.actividad.area.especializacion"));
//        lblTitulo.setText(language.getProperty("mantenimiento.actividad.titulo"));
//        lblDecanatura.setText(language.getProperty("mantenimiento.actividad.decanatura"));
//        lblInvestigador.setText(language.getProperty("mantenimiento.actividad.investigador"));
//        lblCambios.setText(language.getProperty("mantenimiento.actividad.cambios"));
//        lblPrecio.setText(language.getProperty("mantenimiento.actividad.precio"));
//        lblDateIni.setText(language.getProperty("mantenimiento.actividad.fechaini"));
//        lblDateFin.setText(language.getProperty("mantenimiento.actividad.fechaend"));
//        lblDateMaximaInscripcion.setText(language.getProperty("mantenimiento.actividad.fechamaximainscripcion"));
//        cbCancelada.setText(language.getProperty("mantenimiento.actividad.cancelada"));

        this.cmdClose.setText(language.getProperty("mantenimiento.usermain.back"));
    }

    private void addaptToPreferences() {
        /*
         * El mismo panel se usa para añadir/modificar usuarios, hay que adaptar ciertas características
         * en función de qué se solicite
         */
        this.setLabelsLanguage();

        // this.fldTitulo.setDocument(new FieldLimit(NAME_LENGTH));
        // Cambios Vinculados al tipo de llamada
        if (this.actionType.equalsIgnoreCase("Add")) {
            this.addaptToAddActividad();
        } else if (this.actionType.equalsIgnoreCase("Edit")) {
            this.addaptToEditActividad();
        }
    }

    private void addaptToAddActividad() {

        //Titulo de la cabecera
        this.setTitle(language.getProperty("mantenimiento.main.title") + ". "
                + language.getProperty("mantenimiento.main.aula") + ". "
                + language.getProperty("mantenimiento.usermain.newUser"));

        //Inicializamos el combo de tipo de actividad
    }

    private void addaptToEditActividad() {

        this.setTitle(language.getProperty("mantenimiento.main.title") + ". "
                + language.getProperty("mantenimiento.main.user") + ". "
                + language.getProperty("mantenimiento.usermain.modUser"));

        /*
        * Cuando vamos a modificar un usuario, inicializamos los formularios con los valores
        * que tiene el usuario
         */
        try {
            this.actividad = manager.getActividad(this.actividadID);

            //Inicializamos el combo de tipo de actividad
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    language.getProperty("err.sql") + "\n" + language.getProperty("err.detail") + ":\n\n" + ex.getMessage(),
                    language.getProperty("app.title"),
                    JOptionPane.ERROR_MESSAGE);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,
                    language.getProperty("err.generic") + "\n" + language.getProperty("err.detail") + ":\n\n" + ex.getMessage(),
                    language.getProperty("app.title"),
                    JOptionPane.ERROR_MESSAGE);

        }

    }

   private void cmdCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCloseActionPerformed

       /*
     * Cerramos el formulario
        */
       this.dispose();

   }//GEN-LAST:event_cmdCloseActionPerformed

   private void fillAsistencias() {
        ArrayList<String> header = new ArrayList<String>();   // cabecera

        header.add(language.getProperty("mantenimiento.asistencia.alumno"));
        header.add(language.getProperty("mantenimiento.asistencia.estado"));

        String[][] gridData;
        try {
            asistencias = manager.getAsistenciasByActividadId(actividad.getId());
            gridData = new String[asistencias.size()][2];
            int i = 0;
            for (Asistencia asistencia : asistencias) {
                try {
                    Usuario usuariAsistencia = manager.getUsuario(asistencia.getIdUsuari());
                    gridData[i][0] = usuariAsistencia.getNombre() + " " + usuariAsistencia.getApellidos();
                    gridData[i][1] = asistencia.isAsistencia() ? "Si" : "No";
                    i++;
                } catch (Exception ex) {
                    Logger.getLogger(PnlMantenimientoAsistenciaActividadGestor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (Exception ex) {
            gridData = new String[0][2];
            Logger.getLogger(PnlMantenimientoAsistenciaActividadGestor.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Modificamos la tabla para que no sea editable
        this.tblData.setModel(new DefaultTableModel(gridData, header.toArray()) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });

    }

    private void cmdAsistidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAsistidoActionPerformed
        // Mirar si hi ha un alumne seleccionat
        if (tblData.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(null,
                    language.getProperty("mantenimiento.msg.sele.asistente"),
                    language.getProperty("app.title"),
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Obtiene el ID de la actividad a editar
        Asistencia asistencia = asistencias.get(tblData.getSelectedRow());
        try {
            manager.setAsistencia(asistencia.getIdActivitat(), asistencia.getIdUsuari(), true);
        } catch (Exception ex) {
            Logger.getLogger(PnlMantenimientoAsistenciaActividadGestor.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(null, language.getProperty("mantenimiento.msg.edit.asistente"),
            "Información", JOptionPane.INFORMATION_MESSAGE);

        fillAsistencias();
    }//GEN-LAST:event_cmdAsistidoActionPerformed

    private void cmdNoAsistidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNoAsistidoActionPerformed
        // Mirar si hi ha un alumne seleccionat
        if (tblData.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(null,
                    language.getProperty("mantenimiento.msg.asistente"),
                    language.getProperty("app.title"),
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Obtiene el ID de la actividad a editar
        Asistencia asistencia = asistencias.get(tblData.getSelectedRow());
        try {
            manager.setAsistencia(asistencia.getIdActivitat(), asistencia.getIdUsuari(), false);
        } catch (Exception ex) {
            Logger.getLogger(PnlMantenimientoAsistenciaActividadGestor.class.getName()).log(Level.SEVERE, null, ex);
        }
        fillAsistencias();
        JOptionPane.showMessageDialog(null, language.getProperty("mantenimiento.msg.edit.asistente"),
            "Información", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_cmdNoAsistidoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdAsistido;
    private javax.swing.JButton cmdClose;
    private javax.swing.JButton cmdNoAsistido;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTable tblData;
    // End of variables declaration//GEN-END:variables
}
